{"version":3,"file":"index.617b0738.js","sources":["../../hooks/useAutocomplete/generators.ts","../../hooks/useAutocomplete/useAutocomplete.ts","../../components/Autocomplete/styled.tsx","../../components/Autocomplete/index.tsx"],"sourcesContent":["export type FilteredKeys<T, U> = {\n  [P in keyof T]: T[P] extends U ? P : never;\n}[keyof T];\n\nexport type OnlyTypes<O, S> = {\n  [Q in FilteredKeys<O, S>]: O[Q];\n};\n\nexport function* filterIterator<\n  T extends Record<string, any>,\n  F extends OnlyTypes<T, string>\n>(items: Array<T>, key: keyof F, reg: RegExp) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const testString = (item as unknown as F)[key];\n    if (reg.test(testString)) {\n      yield item;\n    }\n  }\n}\n\nexport const map = (iterator: Generator, limit = -1) => {\n  const result = [];\n  let item = iterator.next();\n  let count = 0;\n  while (!item.done) {\n    if (limit > -1) {\n      count++;\n      if (count >= limit) {\n        iterator.return(false);\n      }\n    }\n    result.push(item.value);\n    item = iterator.next();\n  }\n  return result;\n};\n","import React from \"react\";\nimport { filterIterator, map, OnlyTypes } from \"./generators\";\n\nconst strToRegExpReg = /([().,*+])/g;\nconst strToRegExpPreparer = (str: string) =>\n  str.replace(strToRegExpReg, \"\\\\$1\");\nconst strToRegExp = (str: string) => new RegExp(strToRegExpPreparer(str), \"i\");\n\nexport const useAutocomplete = <\n  T extends Record<string, any>,\n  F extends OnlyTypes<T, string>\n>(\n  items: Array<T>,\n  key: keyof F,\n  term: string,\n  limit = 5\n) => {\n  const filteredItems = React.useMemo(() => {\n    if (term) {\n      const reg = strToRegExp(term);\n      const iterator = filterIterator(items, key, reg);\n      return map(iterator, limit);\n    }\n    return items.slice(0, limit);\n  }, [items, term]);\n\n  return filteredItems;\n};\n","import styled from \"styled-components\";\n\nexport const AutocompleteWrapper = styled.form`\n  input {\n    width: 100%;\n    box-sizing: border-box;\n    font-size: 18pt;\n    padding: 16pt 32pt;\n    padding-top: 19pt;\n    border: none;\n    outline: none;\n  }\n`;\n","import * as React from \"react\";\n\nimport { List } from \"../List\";\nimport { useAutocomplete } from \"../../hooks/useAutocomplete\";\nimport { AutocompleteWrapper } from \"./styled\";\n\nexport type AutocompleteItem = {\n  id: number;\n  title: string;\n};\n\nexport type AutocompleteProps = {\n  items: Array<AutocompleteItem>;\n  inputRef: React.Ref<HTMLInputElement>;\n  defaultValue?: string;\n  autoFocus?: boolean;\n\n  onItemSelect?: any;\n  onItemCreate?: any;\n};\n\nexport const Autocomplete: React.FC<AutocompleteProps> = (props) => {\n  const [value, setValue] = React.useState(props.defaultValue || \"\");\n  const filteredItems = useAutocomplete(props.items, \"title\", value, 5);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    props?.onItemCreate(value);\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  return (\n    <AutocompleteWrapper onSubmit={handleSubmit}>\n      <input\n        autoFocus={props.autoFocus}\n        ref={props.inputRef}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <List onItemSelect={props.onItemSelect} items={filteredItems} />\n    </AutocompleteWrapper>\n  );\n};\n"],"names":["filterIterator","items","key","reg","i","item","testString","map","iterator","limit","result","count","strToRegExpReg","strToRegExpPreparer","str","strToRegExp","useAutocomplete","term","React","AutocompleteWrapper","styled","Autocomplete","props","value","setValue","React.useState","filteredItems","jsxs","e","jsx","List"],"mappings":"4MAQiB,SAAAA,EAGfC,EAAiBC,EAAcC,EAAa,CAC5C,QAASC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACrC,MAAMC,EAAOJ,EAAMG,GACbE,EAAcD,EAAsBH,GACtCC,EAAI,KAAKG,CAAU,IACf,MAAAD,EAEV,CACF,CAEO,MAAME,EAAM,CAACC,EAAqBC,EAAQ,KAAO,CACtD,MAAMC,EAAS,CAAA,EACX,IAAAL,EAAOG,EAAS,OAChBG,EAAQ,EACL,KAAA,CAACN,EAAK,MACPI,EAAQ,KACVE,IACIA,GAASF,GACXD,EAAS,OAAO,EAAK,GAGlBE,EAAA,KAAKL,EAAK,KAAK,EACtBA,EAAOG,EAAS,OAEX,OAAAE,CACT,ECjCME,EAAiB,cACjBC,EAAuBC,GAC3BA,EAAI,QAAQF,EAAgB,MAAM,EAC9BG,EAAeD,GAAgB,IAAI,OAAOD,EAAoBC,CAAG,EAAG,GAAG,EAEhEE,EAAkB,CAI7Bf,EACAC,EACAe,EACAR,EAAQ,IAEcS,EAAM,QAAQ,IAAM,CACxC,GAAID,EAAM,CACF,MAAAd,EAAMY,EAAYE,CAAI,EACtBT,EAAWR,EAAeC,EAAOC,EAAKC,CAAG,EACxC,OAAAI,EAAIC,EAAUC,CAAK,CAC5B,CACO,OAAAR,EAAM,MAAM,EAAGQ,CAAK,CAAA,EAC1B,CAACR,EAAOgB,CAAI,CAAC,ECtBXE,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,siBCmBA,MAAAC,EAAAC,GAAA,CACL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAAH,EAAA,cAAA,EAAA,EACAI,EAAAV,EAAAM,EAAA,MAAA,QAAAC,EAAA,CAAA,EAQA,OAAAI,EAAAR,EAAA,CAAA,SANAS,GAAA,CACEN,GAAA,MAAAA,EAAA,aAAAC,GACAK,EAAA,eAAA,EACAA,EAAA,gBAAA,CAAkB,EAGpB,SAAA,CAEIC,EAAA,QAAC,CAAA,UAAAP,EAAA,UACkB,IAAAA,EAAA,SACN,SAAAM,GAAAJ,EAAAI,EAAA,OAAA,KAAA,CAC6B,CAAA,EAC1CC,EAAAC,EAAA,CAAA,aAAAR,EAAA,aAAA,MAAAI,EAAA,CAC8D,CAAA,CAAA,CAGpE"}